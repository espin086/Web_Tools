film <- read.csv("~/Documents/Early-Release-Regression/2. Data/regressionraw v2.txt", header = TRUE, sep="\t")
View(film)
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
selectInput()
?selectInput
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
View(df)
film <- read.csv("~/Documents/Early-Release-Regression/2. Data/regressionraw v2.txt", header = TRUE, sep="\t")
View(film)
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
View(film)
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
View(film)
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
library(ggplot2)
#Loading data
film <- read.csv("regressionraw v2.txt", header = TRUE, sep="\t")
#collapsing genre
film$genre[film$Animation == 1] <- "Animation"
film$genre[film$Adventure == 1] <- "Adventure"
film$genre[film$Comedy == 1] <- "Comedy"
film$genre[film$Romantic.Comedy == 1] <- "Romantic.Comedy"
film$genre[film$Horror.Thriller == 1] <- "Horror.Thriller"
film$genre[film$Drama == 1] <- "Drama"
film$genre[is.na(film$genre)] <- "Action"
#collapsing rating
film$rating[film$R == 1] <- "R"
film$rating[film$PG.13 == 1] <- "PG.13"
film$rating[is.na(film$rating)] <- "Other"
#Producing Model used in the app
model <- lm(WW210 ~ WW.Box + Box...Days.to.HQ + A + genre + rating + Has.CAM., data = film)
#Coefficients
coeff <- as.data.frame(coefficients(model), stringsAsFactors = FALSE)
coeff$variables<-rownames(coeff)
coeff$variables <- gsub( "genre", "", as.character(coeff$variables))
coeff$variables <- gsub( "rating", "", as.character(coeff$variables))
coeff$variables[coeff$variables == "(Intercept)"] <- "intercept"
names(coeff)[1] <- "coefficient"
coeff$variables <- trimws(coeff$variables)
#Input data
input <- data.frame(intercept = 1, WW.Box = 92, Box...Days.to.HQ = 16611, Has.CAM. = 1, A=1 ,genre = "Adventure" , rating = "R")
input <- as.data.frame(t(input),stringsAsFactors = FALSE)
input$variables<-rownames(input)
input$variables <- trimws(input$variables)
temp <- input[which(input$variables == "genre"),]
temp$variables <- temp$V1
input <- rbind(input, temp)
temp <- input[which(input$variables == "rating"),]
temp$variables <- temp$V1
input <- rbind(input, temp)
#Waterfall data
waterfall <- merge(x = coeff, y = input, by = "variables")
waterfall$V1 <- gsub("[^0-9]", "", as.character(waterfall$V1))
waterfall$V1[waterfall$V1 == ""] <- 1
waterfall$V1 <- as.numeric(waterfall$V1)
#Waterfall Calculation
waterfall$amount <- waterfall$coefficient * waterfall$V1
waterfall <- waterfall[order(-waterfall$amount),]
#end <- data.frame(variables = "Total P2P Piracy", coefficient = 1, V1 = 1, amount = sum(waterfall$amount))
#waterfall <- rbind(waterfall, end)
waterfall$id <- seq_along((waterfall$amount))
waterfall$type <- ifelse(waterfall$amount > 0, "risk", "mitigation")
waterfall$end <- cumsum(waterfall$amount)
waterfall$end <- c(head(waterfall$end, -1),0)
waterfall$start <- c(0, head(waterfall$end,-1))
final <- tail(waterfall,1)
final$end <- final$start + final$amount
waterfall <- rbind(waterfall, final)
waterfall<-waterfall[!(waterfall$end==0),]
row.names(waterfall) <- waterfall$id
waterfall$variables <- as.factor(waterfall$variables)
#Creating Plot
plot <- ggplot(waterfall, aes(variables, fill = type)) + geom_rect(aes(x = variables,
xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
plot
plot + scale_x_discrete(limits=waterfall$variables)
shiny::runApp('Documents/Early-Release-Regression/5. Communication/0. App')
getURL("https://api.example.com/resource",
userpwd ="username:password",
httpheader=list(param1="value",param2="value"))
install.packages("RCurl")
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
mycsv <- getURL("https://docs.google.com/spreadsheets/d/1x7K-Iune8THejSqkIeDSB6kuZ5Fu0zR7W5j70HehaH0/pub?output=csv")
shiny::runApp('Documents/Private - Personal Finance/401 K')
tickers <- read.csv("http://www.nasdaq.com/screening/companies-by-industry.aspx?exchange=NYSE&render=download")
View(tickers)
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
str(tickers)
shiny::runApp('Documents/Private - Personal Finance/401 K')
View(tickers)
View(tickers)
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
View(tickers)
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
library(quantmod)
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
library(RCurl)
######################################################
#Importing 401K options: Valic
mycsv <- getURL("https://docs.google.com/spreadsheets/d/1x7K-Iune8THejSqkIeDSB6kuZ5Fu0zR7W5j70HehaH0/pub?output=csv")
tickers <- read.csv(textConnection(mycsv), stringsAsFactors=FALSE)
tickers <- tickers[-4,]#removing a fund that doesn't appear
symbols <- tickers$Ticker
View(tickers)
library(quantmod)
#Importing all data
symbol_env <- new.env()#creating a new environment to store data; this is needed
lapply(symbols, getSymbols, src="yahoo", env = symbol_env)#using lapply to store the data
list_of_symbols <- as.list(symbol_env)#converting environment into a list
returns <- sapply(list_of_symbols, ROC)
#Calculating average of returns per day
returns.mean <- sapply(returns, mean, na.rm = TRUE)
#Calculating standard deviation of returns per day
returns.sd <- sapply(returns, sd, na.rm = TRUE)
returns
head(returns)
str(returns)
returns[1]
returns[1][1:10]
returns[1][1]
returns[1][[1]]
returns[1][[1]][1]
returns[1][[1]][1][1]
returns[1][[1]][1][1,]
sapply(returns, plot)
sapply(returns, [)
sapply(returns, "[")
sapply(returns, "[",1)
sapply(returns, "[",)
sapply(returns, head)
?getSymbols
sapply(returns, plot)
str(returns)
sapply(returns, "[", i =, j = 1)
str(returns)
sapply(returns, "[", i =, j = 4)
close <- sapply(returns, "[", i =, j = 4)
plot(close[1])
plot(close[[1]])
plot(close[[1]])
plot(close)
sapply(close, plot)
sapply(close, plot)
chartSeries(returns)
chartSeries(as.xts(returns))
chartSeries("DIS")
chart_Series(list_of_symbols)
list_of_symbols
chartSeries(YHOO)
chartSeries(symbol_env)
plot(returns$PTRAX, main = paste("returns"))
plot(close$PTRAX, main = paste("close"))
plot(close[1], main = paste("close"))
plot(close[[1]], main = paste("close"))
plot(close[[1]], main = paste("close"))
plot(close[[1]], main = paste("close"))
names(close[[1]])
plot(close[[1]], main = names(close[[1]]))
plots <- function(x){}
plots <- function(x){
plot(close[[1]], main = names(close[[1]]))
}
plots(close[[1]])
sapply(close, plots)
close <- sapply(returns, "[", i =, j = 4)
plots <- function(x){
plot(x, main = names(x)
}
sapply(close, plots)
sapply(close, mean)
sapply(close, names)
close <- sapply(returns, "[", i =, j = 4)
plots <- function(x){
plot(x, main = names(x))
}
sapply(close, plots)
shiny::runApp('Documents/Private - Personal Finance/401 K')
?plots
?plots()
?plot
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
?renderPlot
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
library(RCurl)
######################################################
#Importing 401K options: Valic
mycsv <- getURL("https://docs.google.com/spreadsheets/d/1x7K-Iune8THejSqkIeDSB6kuZ5Fu0zR7W5j70HehaH0/pub?output=csv")
tickers <- read.csv(textConnection(mycsv), stringsAsFactors=FALSE)
tickers <- tickers[-4,]#removing a fund that doesn't appear
symbols <- tickers$Ticker
######################################################
#Downloading historical data
library(quantmod)
#Importing all data
symbol_env <- new.env()#creating a new environment to store data; this is needed
lapply(symbols, getSymbols, src="yahoo", env = symbol_env)#using lapply to store the data
list_of_symbols <- as.list(symbol_env)#converting environment into a list
#Calculating daily returns
returns <- sapply(list_of_symbols, ROC)
#Plotting daily retuns
close <- sapply(returns, "[", i =, j = 4)
plots <- function(x){
plot(x, main = names(x))
}
sapply(close, plots)
#Calculating average of returns per day
returns.mean <- sapply(returns, mean, na.rm = TRUE)
#Calculating standard deviation of returns per day
returns.sd <- sapply(returns, sd, na.rm = TRUE)
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
shiny::runApp('Documents/Private - Personal Finance/401 K')
400*8
128*14
4966-1222
(4966-1222)/.75
(4966-1222)*.75
library(rattle)
rattle()
######################################
#Collecting film meta-data - Box Office Mojo
library(XML) #Used to parse out film data
u <- "http://www.boxofficemojo.com/schedule/?view=bydate&release=theatrical&yr=2016&p=.htm"
readHTMLTable(u)[[1]]
readHTMLTable(u)[[2]]
test.1 <- readHTMLTable(u)
test.1 <- readHTMLTable(u)[[1]]
#Contains a host of data
test.2 <- readHTMLTable(u)[[2]]#Empty
#Contains a host of data
test.3 <- readHTMLTable(u)[[3]]
#Contains a small table with key data
test.4 <- readHTMLTable(u)[[4]]
#Contains a small table with key data
test.5 <- readHTMLTable(u)[[5]]
#Contains a small table with key data
test.6 <- readHTMLTable(u)[[6]]
View(test.1)
View(test.2)
View(test.1)
View(test.2)
View(test.3)
str(test.3)
View(test.3)
View(test.4)
View(test.3)
within(test.3, release <- data.frame(do.call('rbind', strsplit(as.character(FOO), '|', fixed=TRUE))))
names(test.3)
names(test.3)
View(test.3)
names(test.3) <- c("release")
View(test.3)
View(test.2)
View(test.4)
View(test.1)
######################################
#Collecting film meta-data - Box Office Mojo
library(XML) #Used to parse out film data
u <- "http://www.boxofficemojo.com/schedule/?view=bydate&release=theatrical&yr=2016&p=.htm"
#Test code to examine which table to pull
readHTMLTable(u)[[2]]
#Contains a host of data
test.3 <- readHTMLTable(u)[[3]]
View(test.3)
test.3
names(test.3)
str(names(test.3))
foo <- data.frame(do.call('rbind', strsplit(as.character(names(test.3)),'|',fixed=TRUE)))
View(foo)
u <- "http://www.boxofficemojo.com/schedule/?view=distributor&id=buenavista.htm"
input <- readHTMLTable(u)
input[[1]]
input <- readHTMLTable(u)[1]
input <- readHTMLTable(u)[[1]]
View(input)
######################################
#Collecting film meta-data - Box Office Mojo
library(XML) #Used to parse out film data
u <- "http://www.boxofficemojo.com/schedule/?view=distributor&id=buenavista.htm"
#Contains a host of data
input <- readHTMLTable(u)[[1]]
View(input)
dist <- "http://www.boxofficemojo.com/schedule/?view=distributor&p=.htm"
dist.l <- readHTMLTable(dist)
library(XML) #Used to parse out film data
#Collecting list of distributors
dist <- "http://www.boxofficemojo.com/schedule/?view=distributor&p=.htm"
dist.l <- readHTMLTable(dist)
dist.v <- dist.l[[1]]
View(dist.v)
dist.v <- dist[3:length(dist.v),]
dist.f <- dist[3:length(dist.v)]
dist.f <- dist.v[-c(1,2,3)]
dist.f <- dist.v[-c(1,2,3),]
View(dist.f)
dist.f <- dist.v[-c(1,2,),]
dist <- "http://www.boxofficemojo.com/schedule/?view=distributor&p=.htm"
dist.l <- readHTMLTable(dist)
dist.v <- dist.l[[1]]
dist.f <- dist.v[-c(1,2,),]
#Collecting list of distributors
dist <- "http://www.boxofficemojo.com/schedule/?view=distributor&p=.htm"
dist.l <- readHTMLTable(dist)
dist.v <- dist.l[[1]]
dist.f <- dist.v[-c(1,2),]
View(dist.f)
dist.f <- dist.v[-c(1,2),1]
View(dist.v)
dist <- "http://www.boxofficemojo.com/schedule/?view=distributor&p=.htm"
dist.l <- readHTMLTable(dist)
dist.v <- dist.l[[1]]
dist.f <- dist.v[-c(1,2),1]
View(dist.v)
View(dist.v)
dist.f <- dist.v[-c(1,2),]
dist.f <- dist.v[-c(1,2),][1]
View(dist.f)
names(dist.f) <- dist.f[1,1]
View(dist.f)
View(dist.f)
dist.final <- dist.f[- c(1,2),]
#Collecting list of distributors
dist <- "http://www.boxofficemojo.com/schedule/?view=distributor&p=.htm"
dist.l <- readHTMLTable(dist)
dist.v <- dist.l[[1]]
dist.f <- dist.v[- c(1,2),][1]
names(dist.f) <- dist.f[1,1]
dist.final <- dist.f[-c(1,2),]
dist.final
dist.final <- as.data.frame(dist.f[-c(1,2),])
View(dist.final)
dist.final <- as.list(dist.f[-c(1,2),])
dist.final
dist.final <- dist.f[-c(1,2),]
######################################
#Collecting film meta-data - Box Office Mojo
library(XML) #Used to parse out film data
#Collecting list of distributors
dist <- "http://www.boxofficemojo.com/schedule/?view=distributor&p=.htm"
dist.l <- readHTMLTable(dist)
dist.v <- dist.l[[1]]
dist.f <- dist.v[- c(1,2),][1]
View(dist.f)
dist <- "http://www.boxofficemojo.com/schedule/?view=distributor&p=.htm"
dist.l <- readHTMLTable(dist)
dist.v <- dist.l[[1]]
dist.f <- dist.v[- c(1,2,3,4),][1]
View(dist.f)
names(dist.f) <- "dist"
View(dist.f)
View(dist.f)
#Collecting list of distributors
dist <- "http://www.boxofficemojo.com/schedule/?view=distributor&p=.htm"
dist.l <- readHTMLTable(dist)
dist.v <- dist.l[[1]]
dist.f <- dist.v[- c(1,2,3,4, 75, 76),][1]
View(dist.v)
View(dist.f)
names(dist.f) <- "dist"
######################################
#Collecting film meta-data - Box Office Mojo
library(XML) #Used to parse out film data
#Collecting list of distributors
dist <- "http://www.boxofficemojo.com/schedule/?view=distributor&p=.htm"
dist.l <- readHTMLTable(dist)
dist.v <- dist.l[[1]]
dist.f <- dist.v[- c(1,2,3,4, 75, 76),]
names(dist.f) <- c("dist", "num.movies")
View(dist.f)
paste0("http://www.boxofficemojo.com/schedule/?view=distributor&id=",dist.f[1],".htm")
paste0("http://www.boxofficemojo.com/schedule/?view=distributor&id=",dist.f[[1]],".htm")
urls <- paste0("http://www.boxofficemojo.com/schedule/?view=distributor&id=",dist.f[[1]],".htm")
View(dist.f)
input <- readHTMLTable(u)[[1]]
u <- "http://www.boxofficemojo.com/schedule/?view=distributor&id=buenavista.htm"
input <- readHTMLTable(u)[[1]]
View(input)
input <- input[-c(1,2,3,4),]
View(input)
u <- "http://www.boxofficemojo.com/schedule/?view=distributor&id=buenavista.htm"
input <- readHTMLTable(u)[[1]]
input.clean <- input[-c(1,2,3,4),]
View(input.clean)
View(input.clean)
######################################
#Collecting film meta-data - Box Office Mojo
library(XML) #Used to parse out film data
#Collecting list of distributors
dist <- "http://www.boxofficemojo.com/schedule/?view=distributor&p=.htm"
dist.l <- readHTMLTable(dist)
dist.v <- dist.l[[1]]
dist.f <- dist.v[- c(1,2,3,4, 75, 76),]
names(dist.f) <- c("dist", "movies")
#Collecting release dates
urls <- paste0("http://www.boxofficemojo.com/schedule/?view=distributor&id=",dist.f[[1]],".htm")
u <- "http://www.boxofficemojo.com/schedule/?view=distributor&id=buenavista.htm"
input <- readHTMLTable(u)[[1]]
input.clean <- input[-c(1,2,3,4),]
View(input.clean)
library(XML)
# Step 1: construct URLs
urls <- paste("http://www.boxofficemojo.com/people/?view=Actor&pagenum=", 1:3, "&sort=person&order=ASC&p=.htm", sep = "")
# Step 2: scrape website
get_table <- function(u) {
table <- readHTMLTable(u)[[3]]
names(table) <- c("Actor", "Total.Gross", "Num.Movies", "Avg.Per.Movie", "No.1 Movie", "Gross.of.No.1.Movie")
df <- as.data.frame(lapply(table[-1, ], as.character), stringsAsFactors=FALSE)
df <- as.data.frame(df, stringsAsFactors=FALSE)
return(df)
}
df <- do.call("rbind", lapply(urls, get_table))
# Step 3: clean dataframe
clean_df <- function(df) {
clean <- function(col) {
col <- gsub("$", "", col, fixed = TRUE)
col <- gsub("%", "", col, fixed = TRUE)
col <- gsub(",", "", col, fixed = TRUE)
col <- gsub("^", "", col, fixed = TRUE)
return(col)
}
df <- sapply(df, clean)
df <- as.data.frame(df, stringsAsFactors=FALSE)
return(df)
}
df <- clean_df(df)
# Step 4: set column types
s <- c(2:4, 6)
df[, s] <- sapply(df[, s], as.numeric)
df$Studio <- as.factor(df$Studio)
setwd("~/Documents/my-toolbox/5. Web Tools")
write.csv(df, "Scraper-BOM-Actors.csv")
View(df)
